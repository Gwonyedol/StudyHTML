1.kr.or.bit.action

1.1 Action 인터페이스 >> execute(request,resonse)
1.2 업무: UI 구성 + 로직 구현
	ActionForward >> memberfield >> redirect,  path
	
2 kr.or.bit.utils (Project 전체에 공통으로 사용되는 함수(static) 가지고 있는 클래스)
2.1 페이징 처리하는 모든 페이지에서 공통적으로 별도의 클래스
2.2 날짜처리, 숫자포맷, 문자정의 포맷 클래스
2.3 함수를 만들때 고려 사항 (overloading, static 많이 사용)

3 kr.or.bit.service
3.1 주 역할 : DAO 연동, 암호화 처리, 로직에대한 흐름 제어
3.2 표준화된 코드 구현(Action) 인터페이스 구현
3.3 service >> 업무 >> 회원가입 할거야 >> DB를 insert...
				   >> 회원목록 조회할거야
				   >> 화장실 갈거야 >> 길안내
기존 : Controller : 서비스의 요청 받는것(화장실 갈거야) + 처리하는것(위치 알려주는 것)
업무를 나누자 : Controller 서비스의 요청 받는 것(화장실 갈거야)
			Service 처리 하는 것(위치 알려주는것) -> 근데 서비스의 개수가 점점 늘어난다...
			서비스는 요청당 하나 기본이다..
고민) 비동기 처리를 별도로 할것이냐 서비스 안에 넣을 것이냐?!
ex) class boardwrite implement Action{}
execute() 강제구현!

memo 프로젝트
>>MemoAddService : DB에다가 Insert
>>MemoListService : DB에다가 select
>>MemoIdCheckService : 비동기 DB select

4 kr.or.bit.controller ( Front 역할! )
방식의 차이
A사람
요청당 하나의 Controller 만들어 사용 (service를 왜 만들지 이러면..)
요청 + service

B사람
요청에 대한 FrontController 를 하나만 만들어 사용

게시판 : BoardFrontController 게시판 관련 모든 요청

회원  : MemberFrontController 회원 관련 모든 요청

관리자 : AdminFrontController 관리자 관련 모든 요청


>>한개 : FrontMemoController
>>요청 판단 방식
>>command : ?cmd = list
>>URL : /list.do

요청 받고 > 판단 > 요청 처리 service 호출...

//UI 제공( 화면만 제공 : service 만들 필요 없다! )
forward = new ActionForward();
forward.setRedirect(false);
forward.setPath("/WEB-INF/Register/login.jsp");



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


AJAX 처리하기

1. 기존의 동기 처리와 동일하게 처리하기 ( 별도의 jsp 파일 만듬)

2. 별도의 servlet 을 만들어서 처리하는 방식 (별도의 요청으로 처리)
 